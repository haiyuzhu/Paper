%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: triangular.pdf
%%Creator: Adobe Acrobat 17.9.0
%%For: Haiyu
%%CreationDate: 2017/5/6, 9:55:47
%%BoundingBox: 0 0 345 333
%%HiResBoundingBox: 0 0 344.2500 333
%%CropBox: 0 0 344.2500 333
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 949 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-04-27T14:21:29+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2013"
   xmp:ModifyDate="2017-04-27T14:21:29+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>朱海宇</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -333 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 333 li
344.25 333 li
344.25 0 li
cp
clp
gsave
0 333 mo
345 333 li
345 0 li
0 0 li
cp
clp
1.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
81.832 233.858 mo
214.36 284.594 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
214.98 279.488 mo
222.52 287.717 li
211.42 288.809 li
214.98 279.488 li
cp
ef
81.832 233.858 mo
264.81 233.858 li
@
263.56 228.87 mo
273.54 233.858 li
263.56 238.848 li
263.56 228.87 li
cp
ef
81.716 233.858 mo
53.957 76.43 li
@
49.26 78.53 mo
52.441 67.83 li
59.088 76.79 li
49.26 78.53 li
cp
ef
81.716 233.858 mo
102.44 58.28 li
@
97.339 58.93 mo
103.46 49.61 li
107.25 60.1 li
97.339 58.93 li
cp
ef
82.205 233.858 mo
204.66 131.11 li
@
200.5 128.09 mo
211.35 125.49 li
206.91 135.73 li
200.5 128.09 li
cp
ef
82.205 233.858 mo
267.3 152.29 li
@
264.14 148.23 mo
275.29 148.77 li
268.17 157.36 li
264.14 148.23 li
cp
ef
gsave
22.649 323.178 mo
437.95 323.178 li
437.95 276.377 li
22.649 276.377 li
cp
clp
%ADOBeginSubsetFont: IAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /IAAAAA+CambriaMath
Type42DictBegin
[<00010000000c000c000c000c4f532f3284229cfd000000cc000000606376
7420030315980000012c0000089e6670676db5b31812000009cc000010b3
676c79662f9e067a0000d0b800002f1a68656164f80b375600001a800000
00366868656112c4211a00001ab800000024686d7478078c16ff00001adc
000055486c6f63616eaa62b300007024000039866d617870270311d20000
a9ac000000206e616d6502fc48130000a9cc000015c370726570664ecf85
0000bf900000112867646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00002ff420024ff00000000000000004d53202000c00000
d4630639fe39016118ef13b52000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e000040718574737271706f6e6d6c
6b6a69686766656463625f5e5d5c5b5a595855545351504f4e524d4c4b4a
4948474644434241403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d
0c0b0a090807060504030201002c0118b0184358456ab0194360b00c2344
231020b00c4ef04d2fb000121b21231120332f592d2c0118b0184358b005
2bb000134bb0145058b100403859b0062b1b21231120332f592d2c0118b0
1843584eb0032510f221b000124d1b2045b00425b00425234a6164b02852
58212310d61bb0032510f221b0001259592d2cb01a435821211bb00225b0
022549b00325b003254a612064b01050582121211bb00325b0032549b000
5058b0005058b8ffe238211bb0003821591bb0005258b01e38211bb00038
21595959592d2c0118b0184358b0052bb000134bb0145058b90000ffc038
59b0062b1b21231120332f592d2c4e018a10b10c194344b00014b1000ce2
b00015b90000fff03800b0003cb0282bb0022510b0003c2d2c0118b0002f
b00114f2b00113b001154db000122d2c0118b0184358b0052bb00013b900
00ffe038b0062b1b21231120332f592d2c0118b018435845646a23456469
b01943646060b00c2344231020b00cf02fb000121b2121208a208a525811
331b212159592d2c014bb0c85158b10b0a432343650a592d2c004bb0c851
5800b10a0b4323430b592d2c00b00c2370b1010c3e01b00c2370b1020c45
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c014bb0c85158b00643
b00743650a592d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2cb1000325456854b01c4b505a58b0032545b003
2545606820b004252344b0042523441bb00325204568208a2344b0032545
6860b003252344592d2cb00325204568208a2344b003254564686560b004
25b0016023442d2cb00143588721c01bb01243588745b0112bb00d2344b0
0d7ae41b038a45186920b00d23448a8a8720b0a05158b0112bb00d2344b0
0d7ae41b21b00d7ae4595959182d2c208a4523456860442d2c456a422d2c
01182f2d2c0118b0184358b00425b00425496423456469b0408b6120b080
626ab00225b00225618cb0194360b00c2344218a10b00cf6211b21212121
592d2c01b0184358b0022545b002254564606ab00325456a6120b0042545
6a208a8b65b0042523448cb00325234421211b20456a4420456a44592d2c
012045b00055b018435a584568234569b0408b6120b080626a208a236120
b003258b65b0042523448cb00325234421211b2121b0192b592d2c018a8a
45642345646164422d2cb00425b00425b0192bb0184358b00425b00425b0
0325b01b2b01b0022543b04054b0022543b000545a58b003252045b04061
4459b0022543b00054b0022543b040545a58b004252045b0406044595921
2121212d2cb0032520b0072587052e23208ab00425b00725b0142b1021c4
212d2cc02d2c4b525845441b2121592d2cb00243583ded181bed592d2c4b
505845441b2121592d2c01184b52588a2fed1b212121592d2c4b53234b51
5a58b003254568b003254568b003256054582121211bb00225456860b003
2523442121591b212121592d2cb00243583dcd181bcd592d2cb002435c58
462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a1b212121212159
2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f23
21381b2111592d2c2045b00325465058b0022546206861b00325b003253f
2321381b2111592d2c004bb0c8515800b00743b006430b592d2c8a10ec2d
2cb00e4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558
b8100063b003254564b00325456461b0005358b0021bb04061b003592545
69535845441b2121591b21b0022545b00225456164b028515845441b2121
59592d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c184b5358b00425
b00425496423456469b0408b6120b080626ab00225b00225618cb00c2344
218a10b00cf6211b218a11231220392f592d2cb00225b002254964b0c054
58b8fff838b008381b2121592d2cb0134358031b02592d2cb0134358021b
03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038b0282b8a102320
d023b0102bb0044358c01b3c59201011b00012012d2cb0482b2d2c01b002
2510d023c901b00113b0001410b0013cb001162d2c01b00013b001b00325
49b0031738b001132d2c4b53234b515a5820458a60441b2121592d2c184b
5358b00425b004254964b00325b00325496468b0408b6120b080626ab002
25b00225618cb00c234421b004251023b00cf61bb00425b0042511122320
392f59cc21212d2c0118b0184358b0052546234564611b21b00425b00425
4a59b00e23442310b00eec2310b00eec2d2cb01b435820b0016045b00051
5820b0016020452068b0005558b0206044211b212121591b20b001602045
2068b0005558b8ffe06044b01c4b50582045b02060441b21591b21212159
591b21592d2cb0022546206861b00325b003253f2321382d2c462346608a
8a462320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058
b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c2035b001602d2cb0
024354584b53234b515a58381b2121591b21212121592d2c49b00e23442d
2cb0024354584b53234b515a5820458a60441b2121591b21212121592d2c
8a10b002435821b0301ac9181bb0401a18ed592d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b212121
21592d2cb002435458b0492b1b212121592d2c4b52587d1b7a592d2c2320
b000508a8a64b10003255458b0401bb10103255458b005438b59b04f2b59
23b0622b2321235865592d2cb108000c215460432d2c0146234660234661
23201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a23
53583c1b21592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba00020100000243604259595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb901000002
435258b2054008ba0180000901401bb901800002435258b2054008b80200
b109401bb2054008ba010000090100595959b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d2cb0022563b0206066b00225b8200062602362
2d2c0020b200400325b0062649618b3812342d2c204569442d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12501885058b94000020063b8040088545cb0164b525b1bb0
01592d00000100000006f5c34b885e765f0f3cf5001b080000000000b9e6
983d00000000d3ca5f1ff434ec4a16f118ef000000090002000000000000
00010000063bfe390161175af434fda416f1000100000000000000000000
000000000de2054400be0000000001c30000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000686007500000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000004700069000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000034f
005300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000004aa006a00000000000000000000
0000000000000000000000000000000000000000000005bb006500000000
000000000000000000000000046a00680000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000034e005d000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000284004e00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001a4001800000000000000000000000000000000
0000000000000000024900c0000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000032500910000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ae003103b000330000000000000000000000000000000000000000
0000000000000000000000000436006f0436008100000000000000000000
0000000000000000000000000000000000000000000003e0002903e3003f
000000000000000000000000000000000000000000000000000000000000
0000046e0081046e00900000000000000000000000000000000000000000
000000000000000000000000034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000003420063034200730000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000004af005d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000540
003900000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000569
008705190039000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000046a005c0000000000000000
000000000000000004760018000000000000000000000000000000000000
0000045a0046000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000004a10088
04a1009d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000007310088000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000501008200000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000003c6006b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000056d00420000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000595008b0542004200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000004d70074000000000000000000000000000000000509
002d00000000000000000000000000000000000000000486003200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000004c2
009004c200a8000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000007af009900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000056c00990000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000004210080000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000609004b000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000634009c05d7004b0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000524008800000000000000000000000000000000
0576004200000000000000000000000000000000000000000499002e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000033f0000000000000000000000000000033f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000>
<000000760076007600760076007600760076007600760076007600760076
007600760118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
01b001b001b001b001b001b001b001b001b001b001b001b001b001b0023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b0291029102910291
02910291029102910291030c030c030c030c030c03980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398041704170417041704170417041704170417041704170417
041704170478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
0478047804b004b004b004b004b004b004b004e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e605100510
051005100510051005100510051005100510051005100510051005100510
051005100510051005100510051005100510051005100510051005100510
058006150615061506150615061506150615061506850716071607160716
071607160716071607160780080308030803080308030803080308030803
088d092f092f092f092f092f092f092f092f092f093d094b094b094b094b
094b094b094b094b094b094b094b094b094b094b095e0971097109710971
09710971097109710971097109710971097109710a020ab60ab60ab60ab6
0ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab6
0ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab6
0ab60ab60ab60ab60ab60ab60ab60ab60ab60ac40ad20ad20ad20ad20ad2
0ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad2
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0bc0
0bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00c1c
0c970c970c970c970c970c970c970c970c970c970c970c970c970c970c97
0c970c970c970c970cf80cf80cf80cf80cf80d630d630d630d630d630d63
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70e300e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f
0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f
0e8f0e8f0e8f0f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f950f950f950f950f950f950f950f950f950f95
0f950f950f950f950ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff810711071107110711071107110711071107110711071
107110711071107110dc115e115e115e115e115e115e115e115e115e115e
115e115e115e115e115e115e115e115e115e11d611d611d611d611d61257
1257125712571257125712ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca1321
138813881388138813881388138813881388138813881388138813881388
1388138813881388138813881388138813881388138813fb13fb13fb13fb
13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb146a146a
146a146a146a146a146a146a146a146a146a146a146a146a14c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c0152a152a152a
152a152a152a152a152a152a152a152a152a152a152a152a158d16071607
160716071607160716071607160716071607160716071607160716071607
160716071672167216721672167216e216e216e216e216e216e2174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c176d176d176d176d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d00000001
00001cc2004a0004002e000100020010002f0086000009a4112800010001
0000002f023a000000000000000d03880000000000000000000e006c0388
0000000300000000006403f400000003000000010018046e000000030000
0002000e04860000000300000003002e045800000003000000040018046e
0000000300000005001804940000000300000006001604ac000000030000
0007007604c20000000300000008002a0402000000030000000900460538
000000030000000a070a057e000000030000000b00560c88000000030000
000c00280cde000000030000000d03880000000000030000000e006c0388
000100000000000000320d060001000000000001000c0d43000100000000
000200070d4f000100000000000300170d380001000000000004000c0d43
0001000000000005000c0d560001000000000006000b0d62000100000000
0007003b0d6d000100000000000800150d0d000100000000000900230da8
000100000000000a03850dcb000100000000000b002b1150000100000000
000c0014117b000100000000000d01c4118f000100000000000e00361353
0003000104090000006403f400030001040900010018046e000300010409
0002000e04860003000104090003002e045800030001040900040018046e
0003000104090005001804940003000104090006001604ac000300010409
0007007604c20003000104090008002a0402000300010409000900460538
000300010409000a070a057e000300010409000b00560c88000300010409
000c00280cde000300010409000d03880000000300010409000e006c0388
004d006900630072006f0073006f0066007400200073007500700070006c
00690065006400200066006f006e0074002e00200059006f00750020006d
0061007900200075007300650020007400680069007300200066006f006e
007400200074006f0020006300720065006100740065002c002000640069
00730070006c00610079002c00200061006e00640020007000720069006e
007400200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
006c006900630065006e007300650020007400650072006d00730020006f
00720020007400650072006d00730020006f00660020007500730065002c
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000700072006f0064007500630074002c0020007300650072
0076006900630065002c0020006f007200200063006f006e00740065006e
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e0074002000770061007300200069006e0063006c0075
006400650064002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e00200041006e00790020006f007400680065007200200075
00730065002000690073002000700072006f006800690062006900740065
0064002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e00740073002f0064
0065006600610075006c0074002e006100730070007800a9002000320030
003100360020004d006900630072006f0073006f0066007400200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
007200690067006800740073002000720065007300650072007600650064
002e004d006900630072006f0073006f00660074003a002000430061006d
00620072006900610020004d0061007400680052006500670075006c0061
007200560065007200730069006f006e00200036002e0039003600430061
006d0062007200690061004d00610074006800430061006d006200720069
006100200069007300200061002000740072006100640065006d00610072
006b0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000670072006f007500700020006f006600200063006f
006d00700061006e006900650073002e004d006f006e006f007400790070
006500200049006d006100670069006e006700200061006e006400200054
00690072006f002000540079007000650077006f0072006b007300430061
006d006200720069006100200068006100730020006200650065006e0020
00640065007300690067006e0065006400200066006f00720020006f006e
002d00730063007200650065006e002000720065006100640069006e0067
00200061006e006400200074006f0020006c006f006f006b00200067006f
006f00640020007700680065006e0020007000720069006e007400650064
00200061007400200073006d0061006c006c002000730069007a00650073
002e00200049007400200068006100730020007600650072007900200065
00760065006e002000730070006100630069006e006700200061006e0064
002000700072006f0070006f007200740069006f006e0073002e00200044
006900610067006f006e0061006c00200061006e00640020007600650072
0074006900630061006c00200068006100690072006c0069006e00650073
00200061006e006400200073006500720069006600730020006100720065
002000720065006c00610074006900760065006c00790020007300740072
006f006e0067002c0020007700680069006c006500200068006f00720069
007a006f006e00740061006c002000730065007200690066007300200061
0072006500200073006d0061006c006c00200061006e006400200069006e
00740065006e006400200074006f00200065006d00700068006100730069
007a00650020007300740072006f006b006500200065006e00640069006e
0067007300200072006100740068006500720020007400680061006e0020
007300740061006e00640020006f007500740020007400680065006d0073
0065006c007600650073002e002000540068006900730020007000720069
006e006300690070006c00650020006900730020006d006f007300740020
006e006f007400690063006500610062006c006500200069006e00200074
006800650020006900740061006c00690063007300200077006800650072
006500200074006800650020006c006f0077006500720063006100730065
002000630068006100720061006300740065007200730020006100720065
0020007300750062006400750065006400200069006e0020007300740079
006c006500200074006f0020006200650020006100740020007400680065
006900720020006200650073007400200061007300200065006c0065006d
0065006e007400730020006f006600200077006f00720064002d0069006d
0061006700650073002e0020005700680065006e002000430061006d0062
0072006900610020006900730020007500730065006400200066006f0072
002000630061007000740069006f006e0073002000610074002000730069
007a006500730020006f00760065007200200032003000200070006f0069
006e0074002c0020007400680065002000200069006e007400650072002d
006300680061007200610063007400650072002000730070006100630069
006e0067002000730068006f0075006c006400200062006500200073006c
0069006700680074006c0079002000720065006400750063006500640020
0066006f00720020006200650073007400200072006500730075006c0074
0073002e0020005400680065002000640065007300690067006e00200069
0073006e002700740020006a00750073007400200069006e00740065006e
00640065006400200066006f007200200062007500730069006e00650073
007300200064006f00630075006d0065006e00740073003a002000540068
006500200072006500670075006c00610072002000770065006900670068
007400200068006100730020006200650065006e00200065007800740065
006e00640065006400200077006900740068002000610020006c00610072
0067006500200073006500740020006f00660020006d0061007400680020
0061006e006400200073006300690065006e00630065002000730079006d
0062006f006c0073002e002000540068006500200047007200650065006b
00200061006e006400200043007900720069006c006c0069006300200068
006100730020006200650065006e002000640065007300690067006e0065
006400200075006e00640065007200200063006c006f0073006500200073
00750070006500720076006900730069006f006e0020006f006600200061
006e00200069006e007400650072006e006100740069006f006e0061006c
0020007400650061006d0020006f00660020006500780070006500720074
0073002c002000770068006f002000610069006d0065006400200074006f
00200073006500740020006100200068006900730074006f007200690063
0061006c0020006e006500770020007300740061006e0064006100720064
00200069006e0020006d0075006c00740069002d00730063007200690070
007400200074007900700065002000640065007300690067006e002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f006300740066006f006e00740073006800740074
0070003a002f002f007700770077002e0066006f006e00740073002e0063
006f006da92032303136204d6963726f736f667420436f72706f72617469
6f6e2e20416c6c207269676874732072657365727665642e4d6963726f73
6f66743a2043616d62726961204d617468526567756c617256657273696f
6e20362e393643616d627269614d61746843616d62726961206973206120
74726164656d61726b206f6620746865204d6963726f736f66742067726f
7570206f6620636f6d70616e6965732e4d6f6e6f7479706520496d616769
6e6720616e64205469726f2054797065776f726b7343616d627269612068
6173206265656e2064657369676e656420666f72206f6e2d73637265656e
2072656164696e6720616e6420746f206c6f6f6b20676f6f64207768656e
207072696e74656420617420736d616c6c2073697a65732e204974206861
732076657279206576656e2073706163696e6720616e642070726f706f72
74696f6e732e20446961676f6e616c20616e6420766572746963616c2068
6169726c696e657320616e6420736572696673206172652072656c617469
76656c79207374726f6e672c207768696c6520686f72697a6f6e74616c20
7365726966732061726520736d616c6c20616e6420696e74656e6420746f
20656d70686173697a65207374726f6b6520656e64696e67732072617468
6572207468616e207374616e64206f7574207468656d73656c7665732e20
54686973207072696e6369706c65206973206d6f7374206e6f7469636561
626c6520696e20746865206974616c69637320776865726520746865206c
6f7765726361736520636861726163746572732061726520737562647565
6420696e207374796c6520746f2062652061742074686569722062657374
20617320656c656d656e7473206f6620776f72642d696d616765732e2057
68656e2043616d62726961206973207573656420666f722063617074696f
6e732061742073697a6573206f76657220323020706f696e742c20746865
2020696e7465722d6368617261637465722073706163696e672073686f75
6c6420626520736c696768746c79207265647563656420666f7220626573
7420726573756c74732e205468652064657369676e2069736e2774206a75
737420696e74656e64656420666f7220627573696e65737320646f63756d
656e74733a2054686520726567756c617220776569676874206861732062
65656e20657874656e64656420776974682061206c617267652073657420
6f66206d61746820616e6420736369656e63652073796d626f6c732e2054
686520477265656b20616e6420437972696c6c696320686173206265656e
2064657369676e656420756e64657220636c6f7365207375706572766973
696f6e206f6620616e20696e7465726e6174696f6e616c207465616d206f
6620657870657274732c2077686f2061696d656420746f20736574206120
686973746f726963616c206e6577207374616e6461726420696e206d756c
74692d73637269707420747970652064657369676e2e687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374
666f6e7473687474703a2f2f7777772e666f6e74732e636f6d4d6963726f
736f667420737570706c69656420666f6e742e20596f75206d6179207573
65207468697320666f6e7420746f206372656174652c20646973706c6179
2c20616e64207072696e7420636f6e74656e74206173207065726d697474
656420627920746865206c6963656e7365207465726d73206f7220746572
6d73206f66207573652c206f6620746865204d6963726f736f6674207072
6f647563742c20736572766963652c206f7220636f6e74656e7420696e20
7768696368207468697320666f6e742077617320696e636c756465642e20
596f75206d6179206f6e6c792028692920656d626564207468697320666f
6e7420696e20636f6e74656e74206173207065726d697474656420627920
74686520656d62656464696e67207265737472696374696f6e7320696e63
6c7564656420696e207468697320666f6e743b20616e6420286969292074
656d706f726172696c7920646f776e6c6f6164207468697320666f6e7420
746f2061207072696e746572206f72206f74686572206f75747075742064
657669636520746f2068656c70207072696e7420636f6e74656e742e2041
6e79206f74686572207573652069732070726f686962697465642e687474
703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f67726170
68792f666f6e74732f64656661756c742e6173707800b9002001feb40918
014a20b801fab40918014a20b801f9b40918014a20b801f8b40918014a20
b801f7b40918014a20b801f6b40918014a20b801f0b40918014a20b801ef
b40918014a20b801eeb40918014a20b801edb40918014a20b801ecb40918
014a20b801ebb40918014a20b801e6b40918014a20b801e5b40918014a20
b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20b801e1
b40918014a20b801e0b40918014a20b801d3b40918014a20b801d2b40918
014a20b801d1b40918014a20b801cfb40918014a20b801ceb40918014a20
b801cdb40918014a20b801ccb40918014a20b801a0b40918014a20b8018f
b40918014a20b8018eb40918014a20b8018ab40918014a20b80188b40918
014a20b80187b40918014a20b80186b40918014a20b8015bb40918014a20
b8015ab40918014a20b80159b40918014a20b80158b40918014a20b80154
b40918014a20b80150b40918014a20b8014cb40918014a20b8014bb40918
014a20b8014ab40918014a20b80136b40918014a20b80130b40918014a20
b8012fb40918014a20b8012db40918014a20b8012cb40918014a20b80109
b40918014a20b80107b40918014a20b8010540ff0918014a20f40918014a
20f20918014a20f10918014a20f00918014a20ef0918014a20ed0918014a
20ec0918014a20ea0918014a20e50918014a20e40918014a20e30918014a
20e10918014a20de0918014a20da0918014a20d80918014a20d30918014a
20cd0918014a20cc0918014a20ca0918014a20c90918014a20c80918014a
20c60918014a20c40918014a20c20918014a20c00918014a20bf0918014a
20bd0918014a20b30918014a20b10918014a20af0918014a20a50918014a
20a40918014a20a00918014a208e0918014a208d0918014a208c0918014a
208b0918014a208a0918014a20890918014a20850918014a20840918014a
2083091801403e4a20800918014a207f0918014a207e0918014a207d0918
014a20620918014a20510918014a20500918014a20480918014a20420918
014a200e0918014a0f41630441001f0441002f0441003f0441004f044100
5f0441006f0441007f0441008f0441009f044100af044100bf044100cf04
41000d005f03ea0001008003f4009003f400a003f400b003f400c003f400
d003f400e003f400f003f40008002f0433003f0433004f0433005f043300
6f0433007f0433008f0433009f043300af043300bf0433000a001f043400
2f0434003f0434004f0434005f0434006f0434007f0434000700cf042300
df042300ef04230003000f0423001f0423003f0423005f0423009f042340
2305f0e201b0fdc0fd02c0fdd0fde0fdf0fd04d0fde0fdf0fd03c0ffd0ff
e0fff0ff0470410a0425000100c0042500d0042500e0042500f00425400c
04e0bef0be02e0bef0be020f41110421003f04210002001002580001000f
025800e002580002000f040a0001000f0408b4010f26010f411b04070001
000f04060001007f02170001000f029c001f029c002f029c003f029c004f
029c005f029c000600df029c00ef029c00ff029c405303dfe016171cd4d5
16171c7b7c161b7b7c19d1d216171c767716171c6d7016171c6c6f16171c
6b6e161b6b6e7f721a747514151c676a14151c666914151c6568141b6568
85711a1973167a431921794319211941310292009902920002001c029200
2c029200020299029a029b000c028d028e028f000c028a028b028c000c00
1b0299008b02990002000f0299009f029900bb029900db0299000402a502
8b02a7000d029f029a02a1000d029c028e029e000dffe8028eb2142339b9
ffe8029ab2142339411a0282027d0008002b0281027c0005002b027e027a
0004002b027d027a0004002b027a02570005002b027702670005002b0267
0257b2052b20b80270b21b2039bd027202570004002b026e0257b2042b20
b80257b331333909414102710019027100aa025700b80257000400690271
00da025700e802570003028402790006002b028002790004002b027f0279
0008002b027b02790008002b027902560006002b027802660000002b0276
02660008002b027502660008002b027302660008002b026602560006002b
027402560000002b027302560000002b026f0256b2072b29415002560001
008602560001025d025e025f000c025102520253000c024e024f0250000c
000b024e000b0251000a025d003b024e00590251007602510075025d009b
024e00b5025d00d9024e000a0269024f026b000d0263025e0265000d0260
02520262000d0269003c0263003c0260003c025d003c0251003c024e003c
0244023c0005002b024302110002002b0240023c0005002b023e02110004
002b023d0211b2042b464115023c00010046023c00c6023c0002023b0211
0007002b023902110006002b023702110004002b02210211b2072b20b802
33b21316394116022f02110004002b022e02110004002b022d0211000500
2b022c02110004002b022b02110004002b022a0211b2052b474142021100
010005021100a502110002003b0233004b02330064021100740211000402
4202100007002b024102100005002b023f02100002002b023a0210000700
2b023802100007002b023602100007002b023502100007002b0220021000
07002b023402100005002b023102100005002b023002100007002b022902
100007002b02280210b2072b8a416e02100001001a021000b90232000202
1702180219000c020b020c020d000c02080209020a000c000b0208000b02
0b000a0217003b02080059020b0076020b00750217009b020800b5021700
d90208000a022302090225000d021d0218021f000d021a020c021c000d02
23003c021d003c021a003c0217003c020b003c0208003c0153014d000200
2b014e014d0002002b0156015c0004002b0155015c0004002b0157015c00
02002b01da01d4000a002b01d801d4000a002b01e501e00005002b01e101
e00005002b01e001eb0005002b01ef01eb0002002b01ec01ebb2052b40b8
01ebb2090a39b9ffc00104b2313139b9ffc00104b21b2039b8ffc0b4c71f
203940b80103b22c2c39ba010301000100b21f2223b901030100b3c01e1e
23ba010301000100b21d1d23b901030100b3c01c1c23ba010301000100b2
1b1b23b901030100b3c0141a23b901030100b3800b1323b901030100b340
090a23b901020101b340508b23b901010100b340508b23410a0102010000
4f001f01010100004f001fffc00100b2505539b9ffc00100b323233940b8
0100b71d1e3940e81b1b39b8ffc0b4e724253956b80108401301ddd8052b
3bd64bd60240b00b0d39c1c0052bb8ffc040379f131339409c2f30399c9a
012b9b9a052b9a91042ba999042b9992032b40c52c31399291032b889198
910209631863c7630320630d0f39b8fff0b4471f2539cbb8010a401c0198
95012b379e019695022b1897262a3917970110953f4039d99501bc013601
2c0003002b0130b2cd042bb8012fb2cc042bb8012db2cd032bb8012cb2cd
042bbc014c014a0003002b014ab27f052bb9015b0154b2042b0f41190154
001f01540002018601880002002b018701880004002b018901880004002b
0188018f0003002b018e018f0004002b018fb385052b3f410c01a0000101
ce01cc0003002b01d201cc0006002b01d101ccb2062b40b80107b2323239
b80107b2af032bb8ffc0b3de1e2039b8ffc04011dc181a39c9ca032bcac8
042b40c8212239b8ffc0b3c8151739b8ffc0b3c6242539b8ffc0b3c6161a
39b8ffc04023bf2d31395051032b40511b1b39e5cc042be4e3032b40e32a
2a39cdcc052b40cc424439b8ffc0b3cc272739b8ffc0b7cc171a39c2ea01
2bb80109b2da032bb8ffc04033ea252539dfea0140c41b1d39b3b1052bb1
c0052b40c03d3d39c0af042bd3af052baf7d052b20da121639c5bd01208e
01108e01b8ffc0b38b363839b8ffc0b38b272b39b8ffc040328b171a398c
8d052b8d8a042b898a052b8a7f052bf4ef032bf2ef052bf180022bf0a004
2bef85052b40ec32343940ec1b1d39b8ffc0b3a0515239b8ffc0b3a04547
39b8ffc0b3a0383c39b8ffc0400ba02c3139dfa001a080022bb8ffc0b394
313139b8ffc040d480181a39817f012b7e7d052b7d7f052bed7f052bd87f
017f85251f8885012b8785012b8485052b8385052b298539854985036685
014685013685012685011b37151836151535151234150f33150c32150931
15063015032f15002e15f9fa0f20f930f90226270e28270f2a2b0e2c2b0f
22230e24230f1e1f0e201f0f00051005023c3d0e0b3c743c993c030f1011
0c090a0b0c0607080c0304050c0001020c0603641f702a010f2a010b0f4b
0f020b003b0044037403ab00db0f060b000b030b0f3b003b0959035b0976
039b009b09990fd9000cb9010b010c402a0f1b011d0d18071a0d1510170d
1204140d2ff96ff99ff9a0f9cff9d0f9063ff940f9aff9b0f9e0f90500b8
010bb22ff92fba010b003f010b403004fb3cf93cf73cf53c2c3c2a3c283c
263c243c223c203c1e3c1b3c183c153c123c0f3c093c063c033c003c0350
50335401b0124b004b5442b013014b004b5342b0332b4bb8032052b0322b
4bb009505b58b101018e59b0332bb00288b8010054b00488b8020054b012
435a5b58b80119b101018e851bb900010100b04b60858d592b2b1d42b064
4b5358b20380801d4259b0324b5358b20390901d4259004bb03251b01b23
422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b2b
73747573742b2b2b2b2b2b732b732b2b2b2b2b2bb1282645b02a4561b02c
4560442b2b732b2b2b2b2b2b2b2b2b2b2b0173737373742b2b2b2b2b742b
2b2b2b2b2b2b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7475732b2b
2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b732b2b2b2b2b2b732b2b2b012b2b2b2b2b00742b742b2b742b732b
2b74742b2b2b2b2b2b2b2b2b2b2b732b742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b
2b2b732b2b2b0173742b2b2b2b2b2b2b2b2b2b2b2b2b007374752b2b2b2b
2b2b2b2b2b2b2b73742b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b0173
742b2b2b2b2b2b2b2b2b2b2b2b2b0073742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b73742b2b2b0173742b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2bb101322b4bb0505242b002435c4bb064524bb01e505b60b0
1a23424bb0c8524bb036505bb00e23420073747373737373737374737374
7375737374757373747373737373b100024354b102024354b1060243545b
5b58416301fe006401fa006401f9006401f8006401f7006401f6006401f0
006401ef006401ee006401ed006401ec006401eb006401e6006401e50064
01e4006401e3006401e2006401e1006401e0006401d3006401d2006401d1
006401cf006401ce006401cd006401cc006401a00064018f0064018e0064
018a0064018800640187006401860064015b0064015a0064015900640158
00640154006401500064014c0064014b0064014a00640136006401300064
012f0064012d0064012c006401090064010700640105406964f464f264f1
64f064ef64ed64ec64ea64e564e464e364e164de64da64d864d364cd64cc
64ca64c964c864c664c464c264c064bf64bd64b364b164af64a564a464a0
648e648d648c648b648a64896485648464836480647f647e647d64626451
645064486442640e642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b00>
[12059 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 6854 1874 <00010046ffef043b03d100470025401137363633d93c101514140fd91a10
29be00b803ee003fed3fed3211333fed321133313005222e023534363713
363635342623220e0207273e0333321e021514060703060615141633323e
0435342623220607273e0333321615140e0601641d27180a0e0b2a040514
18132c2d2a12301f464e562d26301b0a020238090c0a0e21646e6e58371f
212a4726391841494e254840223e5668767f83111d35482b398242011518
2b0a1f281724291238203f331f192931180e1a0bfe96396d2a2a34355d7f
94a45324274135332442321e4b3f307c8a9189795a35>IAAAAA+CambriaMath AddT42Char 
2 11928 3548 <00010000042e033f05a200070015b600030102020605b80423003f333311
33d6cd3130010107252305270101eb015436fe9f0bfe9936016505a2fec5
39f3f339013b>IAAAAA+CambriaMath AddT42Char 
2 6446 1863 <0001005cfff004330596002e002f4019282727241f054712121a249e2b16
1c1a0f11010ea70f000715003f3fed3f3f333fed11392fed3311332f3331
30012e022323032301363635342627373733033332363635342737211706
0707131e023332363717060623222627020f0a141a214568ad01010d0b33
420cfd3ac4204bbb70440b014413535df8620c1319151a482e395a763744
5017019b271e0afe1604773a41192a22023409fc97837034310631314b48
c0fe972e29143835385f4a4d5a00>IAAAAA+CambriaMath AddT42Char 
2 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>IAAAAA+CambriaMath AddT42Char 
IAAAAA+CambriaMath /CharStrings get begin
/g1874 1874 def
/g3548 3548 def
/g1863 1863 def
end
IAAAAA+CambriaMath /Encoding get
dup 32 /g1874 put
dup 33 /g3548 put
dup 34 /g1863 put
pop
end
%ADOEndSubsetFont
/IXTYTS+CambriaMath /IAAAAA+CambriaMath findfont ct_VMDictPut
/IXTYTS+CambriaMath*1 
[32{/.notdef}rp /g1874 /g3548 /g1863 221{/.notdef}rp]
IXTYTS+CambriaMath nf
IXTYTS+CambriaMath*1 [26.1441 0 0 -26.0666 0 0 ]msf
210.151 308.319 mo
( )sh
213.639 308.319 mo
(!)sh
IXTYTS+CambriaMath*1 [18.5438 0 0 -18.4888 0 0 ]msf
224.101 313.618 mo
(")sh
%ADOBeginSubsetFont: NAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /NAAAAA+CambriaMath
Type42DictBegin
[<00010000000c000c000c000c4f532f3284229cfd000000cc000000606376
7420030315980000012c0000089e6670676db5b31812000009cc000010b3
676c79662f9e067a0000d0b800002f1a68656164f80b375600001a800000
00366868656112c4211a00001ab800000024686d7478078c16ff00001adc
000055486c6f63616eaa62b300007024000039866d617870270311d20000
a9ac000000206e616d6502fc48130000a9cc000015c370726570664ecf85
0000bf900000112867646972000000000000000000000000000304ec0190
00050008059a05330000009c059a0533000001f7006601fe020f02040503
050406030204e00002ff420024ff00000000000000004d53202000c00000
d4630639fe39016118ef13b52000019f0000000003bc0555000000200003
058d000a000005550010002b000000000000041700100000000000000000
03bc001000000000fff0ff9d0000fff00000000000000000fe52fff00000
000000000000000005b1000d033d000d055500100215fff002e00010ffa0
fff000000000000000000000000000000000000000000000000000000000
03e000100000000000000800000008000000040000000042007d00000000
000000630000000000000063007000000000005600000000000000000000
00000000000000000000000000000000000000c200000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000ce00c900bb00830000000000bc00b300ac0000
0000000000ac00b5008500c200bc0078000000000059004f008400a0004f
00540078005a00490055005e00690000007100a400a50000000000000062
0060003100310000003e000a008a00000000000000ca00e800b601fc00a4
009b0000000000000000000000000000000000930085007200b800c2009b
004a0069003e00910063009400ab009f004b008600910000000000000000
000000d60000000000e00261006a007300a700b000850064006800000000
004d00810048005c0078004600560071006e008a005a00af00b4006500b1
0099007800bc0052009e06be00080274000d033dfff3023afff3008b0000
009602740281028e03800074007c009e00de00f40090008ffec2fff00000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00900098004b0084008e0042005a033d03500360007d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00b700a400c10072007800b300a600ac009e00900125009a0087007d010c
009d00bc0132009100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000b7008c00a60000000000000000000000000000
00c300b900af00a50055008e00520073009b00a800420050000000000000
000000000000000000000128010a0083006a005a010e00fa005f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000700063007800540082
006a00720087005800660031007500580068005800750000000000000000
0136013e0088007100a3012d00e400750042007e006e0121013000c60088
0118007a0068009d0042009400ba0130013e007300b4012800f90070005b
008e000000000000000000000000000000000000058d0010000005550010
000000000800011600ce0000040003fa0000000003ea001000000000fff0
00000000fff00000012400c80000fe52fff00000000000000123010d00bc
00b700aa00c600a2009b011b010300f500e100fe012f011c00bc012900d1
012900c600fa00ba00c1010e00ec011b011800d701010000000000000000
00000000000000000000058d001000000555001000000000080000ba008b
0565040000000000000003ea001000000000fff000000000fff0000000b1
008d0000fe52fff0000000000000008100a7009c00c2007d00ac00b400bb
00c1009200b600bb008c00b400a00085009700ad00a600a60091008000a2
00000000000000000000055a0033000005670033000000000800010e00c3
0000040000000000000003c000330000ffd1ffcd00000000ffcd00000000
00000000fe8effcd00000000000000d5006900db003e0050004900000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000207fce305df0249050f
0501ffeb04aa0704fe5b01f5000000a50070009300a5007b007b00670000
000000000000000000000000000000000000000003fd03e805afffee05ba
fe4205110524fe71fe7c000a00d700d900cf00c500e300d300d500ca00e7
033003c503e103f20460040605cd05a200b5042e00770096000000000000
00000000000000000000046e0468045104a4045a042e05270000041c004d
00520057005c00600062006b007200000590073104920556056403f203fa
05980000006c00780086008e0093007e000040718574737271706f6e6d6c
6b6a69686766656463625f5e5d5c5b5a595855545351504f4e524d4c4b4a
4948474644434241403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d
0c0b0a090807060504030201002c0118b0184358456ab0194360b00c2344
231020b00c4ef04d2fb000121b21231120332f592d2c0118b0184358b005
2bb000134bb0145058b100403859b0062b1b21231120332f592d2c0118b0
1843584eb0032510f221b000124d1b2045b00425b00425234a6164b02852
58212310d61bb0032510f221b0001259592d2cb01a435821211bb00225b0
022549b00325b003254a612064b01050582121211bb00325b0032549b000
5058b0005058b8ffe238211bb0003821591bb0005258b01e38211bb00038
21595959592d2c0118b0184358b0052bb000134bb0145058b90000ffc038
59b0062b1b21231120332f592d2c4e018a10b10c194344b00014b1000ce2
b00015b90000fff03800b0003cb0282bb0022510b0003c2d2c0118b0002f
b00114f2b00113b001154db000122d2c0118b0184358b0052bb00013b900
00ffe038b0062b1b21231120332f592d2c0118b018435845646a23456469
b01943646060b00c2344231020b00cf02fb000121b2121208a208a525811
331b212159592d2c014bb0c85158b10b0a432343650a592d2c004bb0c851
5800b10a0b4323430b592d2c00b00c2370b1010c3e01b00c2370b1020c45
3ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225234421
21212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d
2cb000b0122b2121212d2cb000b0132b2121212d2c014bb0c85158b00643
b00743650a592d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2cb1000325456854b01c4b505a58b0032545b003
2545606820b004252344b0042523441bb00325204568208a2344b0032545
6860b003252344592d2cb00325204568208a2344b003254564686560b004
25b0016023442d2cb00143588721c01bb01243588745b0112bb00d2344b0
0d7ae41b038a45186920b00d23448a8a8720b0a05158b0112bb00d2344b0
0d7ae41b21b00d7ae4595959182d2c208a4523456860442d2c456a422d2c
01182f2d2c0118b0184358b00425b00425496423456469b0408b6120b080
626ab00225b00225618cb0194360b00c2344218a10b00cf6211b21212121
592d2c01b0184358b0022545b002254564606ab00325456a6120b0042545
6a208a8b65b0042523448cb00325234421211b20456a4420456a44592d2c
012045b00055b018435a584568234569b0408b6120b080626a208a236120
b003258b65b0042523448cb00325234421211b2121b0192b592d2c018a8a
45642345646164422d2cb00425b00425b0192bb0184358b00425b00425b0
0325b01b2b01b0022543b04054b0022543b000545a58b003252045b04061
4459b0022543b00054b0022543b040545a58b004252045b0406044595921
2121212d2cb0032520b0072587052e23208ab00425b00725b0142b1021c4
212d2cc02d2c4b525845441b2121592d2cb00243583ded181bed592d2c4b
505845441b2121592d2c01184b52588a2fed1b212121592d2c4b53234b51
5a58b003254568b003254568b003256054582121211bb00225456860b003
2523442121591b212121592d2cb00243583dcd181bcd592d2cb002435c58
462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a704560
20b0005058b00161b8ffba8b1bb0468c59b0106068013a1b212121212159
2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f23
21381b2111592d2c2045b00325465058b0022546206861b00325b003253f
2321381b2111592d2c004bb0c8515800b00743b006430b592d2c8a10ec2d
2cb00e4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558
b8100063b003254564b00325456461b0005358b0021bb04061b003592545
69535845441b2121591b21b0022545b00225456164b028515845441b2121
59592d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2c184b5358b00425
b00425496423456469b0408b6120b080626ab00225b00225618cb00c2344
218a10b00cf6211b218a11231220392f592d2cb00225b002254964b0c054
58b8fff838b008381b2121592d2cb0134358031b02592d2cb0134358021b
03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038b0282b8a102320
d023b0102bb0044358c01b3c59201011b00012012d2cb0482b2d2c01b002
2510d023c901b00113b0001410b0013cb001162d2c01b00013b001b00325
49b0031738b001132d2c4b53234b515a5820458a60441b2121592d2c184b
5358b00425b004254964b00325b00325496468b0408b6120b080626ab002
25b00225618cb00c234421b004251023b00cf61bb00425b0042511122320
392f59cc21212d2c0118b0184358b0052546234564611b21b00425b00425
4a59b00e23442310b00eec2310b00eec2d2cb01b435820b0016045b00051
5820b0016020452068b0005558b0206044211b212121591b20b001602045
2068b0005558b8ffe06044b01c4b50582045b02060441b21591b21212159
591b21592d2cb0022546206861b00325b003253f2321382d2c462346608a
8a462320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058
b00161b8ff808b1bb0818c59683a2d2cb0402a212d2c2035b001602d2cb0
024354584b53234b515a58381b2121591b21212121592d2c49b00e23442d
2cb0024354584b53234b515a5820458a60441b2121591b21212121592d2c
8a10b002435821b0301ac9181bb0401a18ed592d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b212121
21592d2cb002435458b0492b1b212121592d2c4b52587d1b7a592d2c2320
b000508a8a64b10003255458b0401bb10103255458b005438b59b04f2b59
23b0622b2321235865592d2cb108000c215460432d2c0146234660234661
23201020468a61b8ff80628ab140408a704560683a2d2c208a2349648a23
53583c1b21592d2cb012004b014b54422d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b202800243604259b12801885158b94000
080063b81000885458ba00020100000243604259595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb901000002
435258b2054008ba0180000901401bb901800002435258b2054008b80200
b109401bb2054008ba010000090100595959b9400000808855b940000200
63b8040088555a58b30c000d011bb30c000d0159595942424242422d2c45
1868234b51582320452064b04050587c59688a6059442d2cb00016b00225
b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001
233f00b002233fb10102060cb006236542b0072342b00116012d2c20b820
00628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff
545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547
b004254760b0062547b0806361b00225b0005558b00325b00725496359b0
082558001b0159b00425b0062549b009255cb009255a58b0092b59b00725
46b0806361b0032520b0005558631b2159612320b0005558b080631b21b0
8059b0592bb006255c586959b00425202010b00048233ab0062658001b01
59b0052658b003252f598a12233221212d2cb00625b00a2587b00625b009
254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb005
256323b00625636020b94000040063535821b00426b00426b00a1bb94000
040063655158b0042665b0042665b00a1bb00426b00426b000b00325b003
250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b0
005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ff
ff545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587
b00a2510b00b25c15920b00051b800522378b00161b00225b00725b00725
07b00a25b00d254961b08062b00525b005250bb00a252338b00625b00625
87b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549
b0032554b8ffa723792121212121212121212121212d2c23b0005458b940
0000001bb900004000598ab0005458b9400000001bb90000400059b05b2b
2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8a
b0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db0
0426b00426080db05b2b2d2cb0022563b0206066b00225b8200062602362
2d2c0020b200400325b0062649618b3812342d2c204569442d2c234ab102
4e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b00343
525821206459b1024e2b23b000505865592d2c238a4a234564b0022564b0
02256164b00343525821206459b1014e2b23b000505865592d2c20b00325
4ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b00325
8ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003
254660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb0
032546b00325466061b08062208a2010233a232010233a2d2cb0032547b0
03254760b0052547b0806361b00225b00625496323b005254ab080632058
621b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b0
0426b06e2b208a2010233a232010233a2d2c2320b001545821b00225b102
4e2bb0805020605920606020b001515821211b20b005515821206661b040
2361b100032550b00325b00325505a5820b00325618a535821b000591b21
591bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b0
04254ab0005358b0001b8a8a238ab00159b004254620666120b00526b006
2649b00526b00526b0702b236165b02060206661b02061652d2cb0022546
208a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620
b802006220b80200638a236120b05d602bb00525118a128a20398a58ba00
5d10000004266356602b23212010204620b1024e2b23611b2321208a2010
49b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526
b06d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d100000
08266356602b20b0005258b0502bb00525b00525b00725b00725b00525b0
712bb0021738b00052b00225b001525a58b00425b0062549b00325b00525
496020b0405258211bb000525820b0025458b00425b00425b00725b00725
49b00217381bb00425b00425b00425b0062549b002173859595959592121
2121212d2cb12501885058b94000020063b8040088545cb0164b525b1bb0
01592d00000100000006f5c34b885e765f0f3cf5001b080000000000b9e6
983d00000000d3ca5f1ff434ec4a16f118ef000000090002000000000000
00010000063bfe390161175af434fda416f1000100000000000000000000
000000000de2054400be0000000001c30000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000686007500000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000004700069000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000034f
005300000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000004aa006a00000000000000000000
0000000000000000000000000000000000000000000005bb006500000000
000000000000000000000000046a00680000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000034e005d000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000284004e00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001a4001800000000000000000000000000000000
0000000000000000024900c0000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000032500910000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000003ae003103b000330000000000000000000000000000000000000000
0000000000000000000000000436006f0436008100000000000000000000
0000000000000000000000000000000000000000000003e0002903e3003f
000000000000000000000000000000000000000000000000000000000000
0000046e0081046e00900000000000000000000000000000000000000000
000000000000000000000000034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000034200630342007300000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000003420063034200730000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000004af005d000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000540
003900000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000569
008705190039000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000046a005c0000000000000000
000000000000000004760018000000000000000000000000000000000000
0000045a0046000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000004a10088
04a1009d0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000007310088000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000501008200000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000003c6006b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000056d00420000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000595008b0542004200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000004d70074000000000000000000000000000000000509
002d00000000000000000000000000000000000000000486003200000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000004c2
009004c200a8000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000007af009900000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000056c00990000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000004210080000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000609004b000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000634009c05d7004b0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000524008800000000000000000000000000000000
0576004200000000000000000000000000000000000000000499002e0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000033f0000000000000000000000000000033f00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000>
<000000760076007600760076007600760076007600760076007600760076
007600760118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
011801180118011801180118011801180118011801180118011801180118
01b001b001b001b001b001b001b001b001b001b001b001b001b001b0023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b023b023b023b023b
023b023b023b023b023b023b023b023b023b023b023b0291029102910291
02910291029102910291030c030c030c030c030c03980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398039803980398039803980398039803980398039803980398
039803980398041704170417041704170417041704170417041704170417
041704170478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
047804780478047804780478047804780478047804780478047804780478
0478047804b004b004b004b004b004b004b004e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e604e604e6
04e604e604e604e604e604e604e604e604e604e604e604e604e605100510
051005100510051005100510051005100510051005100510051005100510
051005100510051005100510051005100510051005100510051005100510
058006150615061506150615061506150615061506850716071607160716
071607160716071607160780080308030803080308030803080308030803
088d092f092f092f092f092f092f092f092f092f093d094b094b094b094b
094b094b094b094b094b094b094b094b094b094b095e0971097109710971
09710971097109710971097109710971097109710a020ab60ab60ab60ab6
0ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab6
0ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab6
0ab60ab60ab60ab60ab60ab60ab60ab60ab60ac40ad20ad20ad20ad20ad2
0ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad20ad2
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b
0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0b5b0bc0
0bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00bc00c1c
0c970c970c970c970c970c970c970c970c970c970c970c970c970c970c97
0c970c970c970c970cf80cf80cf80cf80cf80d630d630d630d630d630d63
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd70dd7
0dd70dd70dd70dd70dd70dd70e300e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f
0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f0e8f
0e8f0e8f0e8f0f110f110f110f110f110f110f110f110f110f110f110f11
0f110f110f110f110f110f950f950f950f950f950f950f950f950f950f95
0f950f950f950f950ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff8
0ff80ff80ff80ff810711071107110711071107110711071107110711071
107110711071107110dc115e115e115e115e115e115e115e115e115e115e
115e115e115e115e115e115e115e115e115e11d611d611d611d611d61257
1257125712571257125712ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca
12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca12ca1321
138813881388138813881388138813881388138813881388138813881388
1388138813881388138813881388138813881388138813fb13fb13fb13fb
13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb13fb146a146a
146a146a146a146a146a146a146a146a146a146a146a146a14c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c014c014c014c0
14c014c014c014c014c014c014c014c014c014c014c014c0152a152a152a
152a152a152a152a152a152a152a152a152a152a152a152a158d16071607
160716071607160716071607160716071607160716071607160716071607
160716071672167216721672167216e216e216e216e216e216e2174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c174c174c174c174c174c174c
174c174c174c174c174c174c174c174c174c176d176d176d176d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d178d178d
178d178d178d178d178d178d178d178d178d178d178d178d178d00000001
00001cc2004a0004002e000100020010002f0086000009a4112800010001
0000002f023a000000000000000d03880000000000000000000e006c0388
0000000300000000006403f400000003000000010018046e000000030000
0002000e04860000000300000003002e045800000003000000040018046e
0000000300000005001804940000000300000006001604ac000000030000
0007007604c20000000300000008002a0402000000030000000900460538
000000030000000a070a057e000000030000000b00560c88000000030000
000c00280cde000000030000000d03880000000000030000000e006c0388
000100000000000000320d060001000000000001000c0d43000100000000
000200070d4f000100000000000300170d380001000000000004000c0d43
0001000000000005000c0d560001000000000006000b0d62000100000000
0007003b0d6d000100000000000800150d0d000100000000000900230da8
000100000000000a03850dcb000100000000000b002b1150000100000000
000c0014117b000100000000000d01c4118f000100000000000e00361353
0003000104090000006403f400030001040900010018046e000300010409
0002000e04860003000104090003002e045800030001040900040018046e
0003000104090005001804940003000104090006001604ac000300010409
0007007604c20003000104090008002a0402000300010409000900460538
000300010409000a070a057e000300010409000b00560c88000300010409
000c00280cde000300010409000d03880000000300010409000e006c0388
004d006900630072006f0073006f0066007400200073007500700070006c
00690065006400200066006f006e0074002e00200059006f00750020006d
0061007900200075007300650020007400680069007300200066006f006e
007400200074006f0020006300720065006100740065002c002000640069
00730070006c00610079002c00200061006e00640020007000720069006e
007400200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
006c006900630065006e007300650020007400650072006d00730020006f
00720020007400650072006d00730020006f00660020007500730065002c
0020006f006600200074006800650020004d006900630072006f0073006f
00660074002000700072006f0064007500630074002c0020007300650072
0076006900630065002c0020006f007200200063006f006e00740065006e
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e0074002000770061007300200069006e0063006c0075
006400650064002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e00200041006e00790020006f007400680065007200200075
00730065002000690073002000700072006f006800690062006900740065
0064002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e00740073002f0064
0065006600610075006c0074002e006100730070007800a9002000320030
003100360020004d006900630072006f0073006f0066007400200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
007200690067006800740073002000720065007300650072007600650064
002e004d006900630072006f0073006f00660074003a002000430061006d
00620072006900610020004d0061007400680052006500670075006c0061
007200560065007200730069006f006e00200036002e0039003600430061
006d0062007200690061004d00610074006800430061006d006200720069
006100200069007300200061002000740072006100640065006d00610072
006b0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000670072006f007500700020006f006600200063006f
006d00700061006e006900650073002e004d006f006e006f007400790070
006500200049006d006100670069006e006700200061006e006400200054
00690072006f002000540079007000650077006f0072006b007300430061
006d006200720069006100200068006100730020006200650065006e0020
00640065007300690067006e0065006400200066006f00720020006f006e
002d00730063007200650065006e002000720065006100640069006e0067
00200061006e006400200074006f0020006c006f006f006b00200067006f
006f00640020007700680065006e0020007000720069006e007400650064
00200061007400200073006d0061006c006c002000730069007a00650073
002e00200049007400200068006100730020007600650072007900200065
00760065006e002000730070006100630069006e006700200061006e0064
002000700072006f0070006f007200740069006f006e0073002e00200044
006900610067006f006e0061006c00200061006e00640020007600650072
0074006900630061006c00200068006100690072006c0069006e00650073
00200061006e006400200073006500720069006600730020006100720065
002000720065006c00610074006900760065006c00790020007300740072
006f006e0067002c0020007700680069006c006500200068006f00720069
007a006f006e00740061006c002000730065007200690066007300200061
0072006500200073006d0061006c006c00200061006e006400200069006e
00740065006e006400200074006f00200065006d00700068006100730069
007a00650020007300740072006f006b006500200065006e00640069006e
0067007300200072006100740068006500720020007400680061006e0020
007300740061006e00640020006f007500740020007400680065006d0073
0065006c007600650073002e002000540068006900730020007000720069
006e006300690070006c00650020006900730020006d006f007300740020
006e006f007400690063006500610062006c006500200069006e00200074
006800650020006900740061006c00690063007300200077006800650072
006500200074006800650020006c006f0077006500720063006100730065
002000630068006100720061006300740065007200730020006100720065
0020007300750062006400750065006400200069006e0020007300740079
006c006500200074006f0020006200650020006100740020007400680065
006900720020006200650073007400200061007300200065006c0065006d
0065006e007400730020006f006600200077006f00720064002d0069006d
0061006700650073002e0020005700680065006e002000430061006d0062
0072006900610020006900730020007500730065006400200066006f0072
002000630061007000740069006f006e0073002000610074002000730069
007a006500730020006f00760065007200200032003000200070006f0069
006e0074002c0020007400680065002000200069006e007400650072002d
006300680061007200610063007400650072002000730070006100630069
006e0067002000730068006f0075006c006400200062006500200073006c
0069006700680074006c0079002000720065006400750063006500640020
0066006f00720020006200650073007400200072006500730075006c0074
0073002e0020005400680065002000640065007300690067006e00200069
0073006e002700740020006a00750073007400200069006e00740065006e
00640065006400200066006f007200200062007500730069006e00650073
007300200064006f00630075006d0065006e00740073003a002000540068
006500200072006500670075006c00610072002000770065006900670068
007400200068006100730020006200650065006e00200065007800740065
006e00640065006400200077006900740068002000610020006c00610072
0067006500200073006500740020006f00660020006d0061007400680020
0061006e006400200073006300690065006e00630065002000730079006d
0062006f006c0073002e002000540068006500200047007200650065006b
00200061006e006400200043007900720069006c006c0069006300200068
006100730020006200650065006e002000640065007300690067006e0065
006400200075006e00640065007200200063006c006f0073006500200073
00750070006500720076006900730069006f006e0020006f006600200061
006e00200069006e007400650072006e006100740069006f006e0061006c
0020007400650061006d0020006f00660020006500780070006500720074
0073002c002000770068006f002000610069006d0065006400200074006f
00200073006500740020006100200068006900730074006f007200690063
0061006c0020006e006500770020007300740061006e0064006100720064
00200069006e0020006d0075006c00740069002d00730063007200690070
007400200074007900700065002000640065007300690067006e002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f006300740066006f006e00740073006800740074
0070003a002f002f007700770077002e0066006f006e00740073002e0063
006f006da92032303136204d6963726f736f667420436f72706f72617469
6f6e2e20416c6c207269676874732072657365727665642e4d6963726f73
6f66743a2043616d62726961204d617468526567756c617256657273696f
6e20362e393643616d627269614d61746843616d62726961206973206120
74726164656d61726b206f6620746865204d6963726f736f66742067726f
7570206f6620636f6d70616e6965732e4d6f6e6f7479706520496d616769
6e6720616e64205469726f2054797065776f726b7343616d627269612068
6173206265656e2064657369676e656420666f72206f6e2d73637265656e
2072656164696e6720616e6420746f206c6f6f6b20676f6f64207768656e
207072696e74656420617420736d616c6c2073697a65732e204974206861
732076657279206576656e2073706163696e6720616e642070726f706f72
74696f6e732e20446961676f6e616c20616e6420766572746963616c2068
6169726c696e657320616e6420736572696673206172652072656c617469
76656c79207374726f6e672c207768696c6520686f72697a6f6e74616c20
7365726966732061726520736d616c6c20616e6420696e74656e6420746f
20656d70686173697a65207374726f6b6520656e64696e67732072617468
6572207468616e207374616e64206f7574207468656d73656c7665732e20
54686973207072696e6369706c65206973206d6f7374206e6f7469636561
626c6520696e20746865206974616c69637320776865726520746865206c
6f7765726361736520636861726163746572732061726520737562647565
6420696e207374796c6520746f2062652061742074686569722062657374
20617320656c656d656e7473206f6620776f72642d696d616765732e2057
68656e2043616d62726961206973207573656420666f722063617074696f
6e732061742073697a6573206f76657220323020706f696e742c20746865
2020696e7465722d6368617261637465722073706163696e672073686f75
6c6420626520736c696768746c79207265647563656420666f7220626573
7420726573756c74732e205468652064657369676e2069736e2774206a75
737420696e74656e64656420666f7220627573696e65737320646f63756d
656e74733a2054686520726567756c617220776569676874206861732062
65656e20657874656e64656420776974682061206c617267652073657420
6f66206d61746820616e6420736369656e63652073796d626f6c732e2054
686520477265656b20616e6420437972696c6c696320686173206265656e
2064657369676e656420756e64657220636c6f7365207375706572766973
696f6e206f6620616e20696e7465726e6174696f6e616c207465616d206f
6620657870657274732c2077686f2061696d656420746f20736574206120
686973746f726963616c206e6577207374616e6461726420696e206d756c
74692d73637269707420747970652064657369676e2e687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f6374
666f6e7473687474703a2f2f7777772e666f6e74732e636f6d4d6963726f
736f667420737570706c69656420666f6e742e20596f75206d6179207573
65207468697320666f6e7420746f206372656174652c20646973706c6179
2c20616e64207072696e7420636f6e74656e74206173207065726d697474
656420627920746865206c6963656e7365207465726d73206f7220746572
6d73206f66207573652c206f6620746865204d6963726f736f6674207072
6f647563742c20736572766963652c206f7220636f6e74656e7420696e20
7768696368207468697320666f6e742077617320696e636c756465642e20
596f75206d6179206f6e6c792028692920656d626564207468697320666f
6e7420696e20636f6e74656e74206173207065726d697474656420627920
74686520656d62656464696e67207265737472696374696f6e7320696e63
6c7564656420696e207468697320666f6e743b20616e6420286969292074
656d706f726172696c7920646f776e6c6f6164207468697320666f6e7420
746f2061207072696e746572206f72206f74686572206f75747075742064
657669636520746f2068656c70207072696e7420636f6e74656e742e2041
6e79206f74686572207573652069732070726f686962697465642e687474
703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f67726170
68792f666f6e74732f64656661756c742e6173707800b9002001feb40918
014a20b801fab40918014a20b801f9b40918014a20b801f8b40918014a20
b801f7b40918014a20b801f6b40918014a20b801f0b40918014a20b801ef
b40918014a20b801eeb40918014a20b801edb40918014a20b801ecb40918
014a20b801ebb40918014a20b801e6b40918014a20b801e5b40918014a20
b801e4b40918014a20b801e3b40918014a20b801e2b40918014a20b801e1
b40918014a20b801e0b40918014a20b801d3b40918014a20b801d2b40918
014a20b801d1b40918014a20b801cfb40918014a20b801ceb40918014a20
b801cdb40918014a20b801ccb40918014a20b801a0b40918014a20b8018f
b40918014a20b8018eb40918014a20b8018ab40918014a20b80188b40918
014a20b80187b40918014a20b80186b40918014a20b8015bb40918014a20
b8015ab40918014a20b80159b40918014a20b80158b40918014a20b80154
b40918014a20b80150b40918014a20b8014cb40918014a20b8014bb40918
014a20b8014ab40918014a20b80136b40918014a20b80130b40918014a20
b8012fb40918014a20b8012db40918014a20b8012cb40918014a20b80109
b40918014a20b80107b40918014a20b8010540ff0918014a20f40918014a
20f20918014a20f10918014a20f00918014a20ef0918014a20ed0918014a
20ec0918014a20ea0918014a20e50918014a20e40918014a20e30918014a
20e10918014a20de0918014a20da0918014a20d80918014a20d30918014a
20cd0918014a20cc0918014a20ca0918014a20c90918014a20c80918014a
20c60918014a20c40918014a20c20918014a20c00918014a20bf0918014a
20bd0918014a20b30918014a20b10918014a20af0918014a20a50918014a
20a40918014a20a00918014a208e0918014a208d0918014a208c0918014a
208b0918014a208a0918014a20890918014a20850918014a20840918014a
2083091801403e4a20800918014a207f0918014a207e0918014a207d0918
014a20620918014a20510918014a20500918014a20480918014a20420918
014a200e0918014a0f41630441001f0441002f0441003f0441004f044100
5f0441006f0441007f0441008f0441009f044100af044100bf044100cf04
41000d005f03ea0001008003f4009003f400a003f400b003f400c003f400
d003f400e003f400f003f40008002f0433003f0433004f0433005f043300
6f0433007f0433008f0433009f043300af043300bf0433000a001f043400
2f0434003f0434004f0434005f0434006f0434007f0434000700cf042300
df042300ef04230003000f0423001f0423003f0423005f0423009f042340
2305f0e201b0fdc0fd02c0fdd0fde0fdf0fd04d0fde0fdf0fd03c0ffd0ff
e0fff0ff0470410a0425000100c0042500d0042500e0042500f00425400c
04e0bef0be02e0bef0be020f41110421003f04210002001002580001000f
025800e002580002000f040a0001000f0408b4010f26010f411b04070001
000f04060001007f02170001000f029c001f029c002f029c003f029c004f
029c005f029c000600df029c00ef029c00ff029c405303dfe016171cd4d5
16171c7b7c161b7b7c19d1d216171c767716171c6d7016171c6c6f16171c
6b6e161b6b6e7f721a747514151c676a14151c666914151c6568141b6568
85711a1973167a431921794319211941310292009902920002001c029200
2c029200020299029a029b000c028d028e028f000c028a028b028c000c00
1b0299008b02990002000f0299009f029900bb029900db0299000402a502
8b02a7000d029f029a02a1000d029c028e029e000dffe8028eb2142339b9
ffe8029ab2142339411a0282027d0008002b0281027c0005002b027e027a
0004002b027d027a0004002b027a02570005002b027702670005002b0267
0257b2052b20b80270b21b2039bd027202570004002b026e0257b2042b20
b80257b331333909414102710019027100aa025700b80257000400690271
00da025700e802570003028402790006002b028002790004002b027f0279
0008002b027b02790008002b027902560006002b027802660000002b0276
02660008002b027502660008002b027302660008002b026602560006002b
027402560000002b027302560000002b026f0256b2072b29415002560001
008602560001025d025e025f000c025102520253000c024e024f0250000c
000b024e000b0251000a025d003b024e00590251007602510075025d009b
024e00b5025d00d9024e000a0269024f026b000d0263025e0265000d0260
02520262000d0269003c0263003c0260003c025d003c0251003c024e003c
0244023c0005002b024302110002002b0240023c0005002b023e02110004
002b023d0211b2042b464115023c00010046023c00c6023c0002023b0211
0007002b023902110006002b023702110004002b02210211b2072b20b802
33b21316394116022f02110004002b022e02110004002b022d0211000500
2b022c02110004002b022b02110004002b022a0211b2052b474142021100
010005021100a502110002003b0233004b02330064021100740211000402
4202100007002b024102100005002b023f02100002002b023a0210000700
2b023802100007002b023602100007002b023502100007002b0220021000
07002b023402100005002b023102100005002b023002100007002b022902
100007002b02280210b2072b8a416e02100001001a021000b90232000202
1702180219000c020b020c020d000c02080209020a000c000b0208000b02
0b000a0217003b02080059020b0076020b00750217009b020800b5021700
d90208000a022302090225000d021d0218021f000d021a020c021c000d02
23003c021d003c021a003c0217003c020b003c0208003c0153014d000200
2b014e014d0002002b0156015c0004002b0155015c0004002b0157015c00
02002b01da01d4000a002b01d801d4000a002b01e501e00005002b01e101
e00005002b01e001eb0005002b01ef01eb0002002b01ec01ebb2052b40b8
01ebb2090a39b9ffc00104b2313139b9ffc00104b21b2039b8ffc0b4c71f
203940b80103b22c2c39ba010301000100b21f2223b901030100b3c01e1e
23ba010301000100b21d1d23b901030100b3c01c1c23ba010301000100b2
1b1b23b901030100b3c0141a23b901030100b3800b1323b901030100b340
090a23b901020101b340508b23b901010100b340508b23410a0102010000
4f001f01010100004f001fffc00100b2505539b9ffc00100b323233940b8
0100b71d1e3940e81b1b39b8ffc0b4e724253956b80108401301ddd8052b
3bd64bd60240b00b0d39c1c0052bb8ffc040379f131339409c2f30399c9a
012b9b9a052b9a91042ba999042b9992032b40c52c31399291032b889198
910209631863c7630320630d0f39b8fff0b4471f2539cbb8010a401c0198
95012b379e019695022b1897262a3917970110953f4039d99501bc013601
2c0003002b0130b2cd042bb8012fb2cc042bb8012db2cd032bb8012cb2cd
042bbc014c014a0003002b014ab27f052bb9015b0154b2042b0f41190154
001f01540002018601880002002b018701880004002b018901880004002b
0188018f0003002b018e018f0004002b018fb385052b3f410c01a0000101
ce01cc0003002b01d201cc0006002b01d101ccb2062b40b80107b2323239
b80107b2af032bb8ffc0b3de1e2039b8ffc04011dc181a39c9ca032bcac8
042b40c8212239b8ffc0b3c8151739b8ffc0b3c6242539b8ffc0b3c6161a
39b8ffc04023bf2d31395051032b40511b1b39e5cc042be4e3032b40e32a
2a39cdcc052b40cc424439b8ffc0b3cc272739b8ffc0b7cc171a39c2ea01
2bb80109b2da032bb8ffc04033ea252539dfea0140c41b1d39b3b1052bb1
c0052b40c03d3d39c0af042bd3af052baf7d052b20da121639c5bd01208e
01108e01b8ffc0b38b363839b8ffc0b38b272b39b8ffc040328b171a398c
8d052b8d8a042b898a052b8a7f052bf4ef032bf2ef052bf180022bf0a004
2bef85052b40ec32343940ec1b1d39b8ffc0b3a0515239b8ffc0b3a04547
39b8ffc0b3a0383c39b8ffc0400ba02c3139dfa001a080022bb8ffc0b394
313139b8ffc040d480181a39817f012b7e7d052b7d7f052bed7f052bd87f
017f85251f8885012b8785012b8485052b8385052b298539854985036685
014685013685012685011b37151836151535151234150f33150c32150931
15063015032f15002e15f9fa0f20f930f90226270e28270f2a2b0e2c2b0f
22230e24230f1e1f0e201f0f00051005023c3d0e0b3c743c993c030f1011
0c090a0b0c0607080c0304050c0001020c0603641f702a010f2a010b0f4b
0f020b003b0044037403ab00db0f060b000b030b0f3b003b0959035b0976
039b009b09990fd9000cb9010b010c402a0f1b011d0d18071a0d1510170d
1204140d2ff96ff99ff9a0f9cff9d0f9063ff940f9aff9b0f9e0f90500b8
010bb22ff92fba010b003f010b403004fb3cf93cf73cf53c2c3c2a3c283c
263c243c223c203c1e3c1b3c183c153c123c0f3c093c063c033c003c0350
50335401b0124b004b5442b013014b004b5342b0332b4bb8032052b0322b
4bb009505b58b101018e59b0332bb00288b8010054b00488b8020054b012
435a5b58b80119b101018e851bb900010100b04b60858d592b2b1d42b064
4b5358b20380801d4259b0324b5358b20390901d4259004bb03251b01b23
422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b2b
73747573742b2b2b2b2b2b732b732b2b2b2b2b2bb1282645b02a4561b02c
4560442b2b732b2b2b2b2b2b2b2b2b2b2b0173737373742b2b2b2b2b742b
2b2b2b2b2b2b742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7475732b2b
2b2b2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b732b2b2b2b2b2b732b2b2b012b2b2b2b2b00742b742b2b742b732b
2b74742b2b2b2b2b2b2b2b2b2b2b732b742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b
2b2b732b2b2b0173742b2b2b2b2b2b2b2b2b2b2b2b2b007374752b2b2b2b
2b2b2b2b2b2b2b73742b2b2b2b2b002b2b2b2b2b2b2b2b2b732b2b2b0173
742b2b2b2b2b2b2b2b2b2b2b2b2b0073742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b73742b2b2b0173742b2bb018b03f4b53422b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2bb101322b4bb0505242b002435c4bb064524bb01e505b60b0
1a23424bb0c8524bb036505bb00e23420073747373737373737374737374
7375737374757373747373737373b100024354b102024354b1060243545b
5b58416301fe006401fa006401f9006401f8006401f7006401f6006401f0
006401ef006401ee006401ed006401ec006401eb006401e6006401e50064
01e4006401e3006401e2006401e1006401e0006401d3006401d2006401d1
006401cf006401ce006401cd006401cc006401a00064018f0064018e0064
018a0064018800640187006401860064015b0064015a0064015900640158
00640154006401500064014c0064014b0064014a00640136006401300064
012f0064012d0064012c006401090064010700640105406964f464f264f1
64f064ef64ed64ec64ea64e564e464e364e164de64da64d864d364cd64cc
64ca64c964c864c664c464c264c064bf64bd64b364b164af64a564a464a0
648e648d648c648b648a64896485648464836480647f647e647d64626451
645064486442640e642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b00>
[12059 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 2288 481 <00010018feec014300e8000d003cb0852b58401206b2c00d40090d480d06
070d02b10b0b0f0e1112392fe1c6c632002f2b1aec31301b400906b2c00d
40090d480d00182f2b1aec30315925161514060607273e0235342701350e
30695c36332e1407e84644467473453d304d624a4c4a>NAAAAA+CambriaMath AddT42Char 
2 4102 884 <00010081000003c9056500280099b0852b584033201d121209181816081d
16031a169b401d040905401013480528082803289f081919120905070620
8c12122a19280909188e192fe1332f331112392ff1d632cd1112392f002f
ed2b001810c62b333f1aed322b11120039182f113911123931301b401b20
1d1212091818081a1d169b6c1d040905401013480508289f6c0800182f2b
c62b333f2b3211392f113911123930315925323e02373303213536363736
373e02353426262322072335363633321615140e0307060702be313c2415
105511fcc92b9286743338371830634bbb417979d354babe152d4c5c71be
59a00c1c2d2ffedc3069dc95804248695d2f4b7342d0c03933a39b355957
646778c99600>NAAAAA+CambriaMath AddT42Char 
2 0 0 <000400be0000048605540028002c00300034004b4025152f3428292c002c
1d0b312e342c0b2e2e0b2c3404353600292b30331213130e18182e310300
3fcd322fcd322f3fddd6cd3211120117392f2f2f2f10cd10cd113310cd32
10ddc631300135343e02373e0335342623220e02072335363633321e0215
140e02070e031515171523350111211101112111023706162a2417261b0f
413e2030241909603c894346633e1c0f243c2c20261507129001fcfd0603
61fc3801e71616252a3527192f3339234b521424321e821e2e1d33462926
3e3d462d212c27281c066ea1a1fee4049afb6604f7faac055400>NAAAAA+CambriaMath AddT42Char 
NAAAAA+CambriaMath /CharStrings get begin
/g481 481 def
/g884 884 def
end
NAAAAA+CambriaMath /Encoding get
dup 44 /g481 put
dup 50 /g884 put
pop
end
%ADOEndSubsetFont
/IXTYTT+CambriaMath /NAAAAA+CambriaMath findfont ct_VMDictPut
/IXTYTT+CambriaMath*1 
[44{/.notdef}rp /g481 5{/.notdef}rp /g884 205{/.notdef}rp]
IXTYTT+CambriaMath nf
IXTYTT+CambriaMath*1 [18.5438 0 0 -18.4888 0 0 ]msf
235.796 313.618 mo
(,)sh
239.644 313.618 mo
(2)sh
%ADOBeginSubsetFont: IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (IXTYTU+DengXian-Regular-GBK-EUC-H)
%%Title: (IXTYTU+DengXian-Regular-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /IXTYTU+DengXian-Regular-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
28595 <001C60D8A8C9B8581AA5> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H /Identity-H 0 [/IXTYTU+DengXian-Regular-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H findfont [26.1441 0 0 -26.0666 0 0 ]msf
251.43 308.319 mo
(o\263)sh
grestore
gsave
94.238 255.118 mo
509.539 255.118 li
509.539 208.317 li
94.238 208.317 li
cp
clp
IXTYTS+CambriaMath*1 [26.1441 4.26058e-7 0 -26.0666 0 0 ]msf
281.74 240.259 mo
( )sh
285.228 240.259 mo
(!)sh
IXTYTS+CambriaMath*1 [18.5438 3.02199e-7 0 -18.4888 0 0 ]msf
295.69 245.559 mo
(")sh
%ADOBeginSubsetFont: NAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IXTYTT+CambriaMath gcheck setglobal} if
2 4378 885 <00010090fff003ca0565003000bbb0852b5840440d0c2526262503259a40
260416269a28300f1a0111031a001a001e2d161e03191e9a401613042d03
012d9b04040c0826262a308e00001a088c2a2a1a128c2121321b8e1a2fe1
12392fe112392fe112392fe112392f1239003fed322b00183f1aed322b11
12003939182f2f5f5e5d2b00182f1aed2b111200393931301b401f0d0c26
259a6c260f1a0111031a001a002d19161e9a6c161301042d9b6c04040018
3f2b323f2b321139392f2f5f5e5d2f2b3939303159133536363332161615
14060607151e031514060623222627353316163332363534262323353e02
353426232206079f74ca5e71aa5a447b623d71583565d09556c753782373
638285b0aa5a87b95a76715e761c043abe373646835b5581602e090b3554
754b74b4682720d4685e8e8b929a5808588a566f78666900>IXTYTT+CambriaMath AddT42Char 
IXTYTT+CambriaMath /CharStrings get begin
/g885 885 def
end
IXTYTT+CambriaMath /Encoding get
dup 51 /g885 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IXTYTT+CambriaMath*1 
[44{/.notdef}rp /g481 5{/.notdef}rp /g884 /g885 204{/.notdef}rp]
IXTYTT+CambriaMath nf
IXTYTT+CambriaMath*1 [18.5438 3.02199e-7 0 -18.4888 0 0 ]msf
307.385 245.559 mo
(,)sh
311.233 245.559 mo
(3)sh
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H findfont [26.1441 4.26058e-7 0 -26.0666 0 0 ]msf
323.019 240.259 mo
(o\263)sh
grestore
gsave
-87.18 55.28 mo
328.121 55.28 li
328.121 8.47943 li
-87.18 8.4794 li
cp
clp
IXTYTS+CambriaMath*1 [26.1441 1.70876e-6 -3.76963e-6 -26.0666 0 0 ]msf
100.322 40.4212 mo
( )sh
IXTYTS+CambriaMath*1 [18.5438 1.21201e-6 -2.67377e-6 -18.4888 0 0 ]msf
114.272 45.7206 mo
(")sh
IXTYTT+CambriaMath*1 [18.5438 1.21201e-6 -2.67377e-6 -18.4888 0 0 ]msf
125.967 45.7206 mo
(,)sh
129.815 45.7206 mo
(2)sh
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H findfont [26.1441 1.70876e-6 -3.76963e-6 -26.0666 0 0 ]msf
141.601 40.4212 mo
(o\263)sh
grestore
gsave
-169.98 72.28 mo
245.321 72.28 li
245.321 25.4794 li
-169.98 25.4794 li
cp
clp
IXTYTS+CambriaMath*1 [26.1441 0 -7.53926e-6 -26.0666 0 0 ]msf
17.5222 57.4212 mo
( )sh
IXTYTS+CambriaMath*1 [18.5438 0 -5.34754e-6 -18.4888 0 0 ]msf
31.4721 62.7205 mo
(")sh
IXTYTT+CambriaMath*1 [18.5438 0 -5.34754e-6 -18.4888 0 0 ]msf
43.1672 62.7205 mo
(,)sh
47.0155 62.7205 mo
(3)sh
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H findfont [26.1441 0 -7.53926e-6 -26.0666 0 0 ]msf
58.8008 57.4212 mo
(o\263)sh
grestore
gsave
-15.591 265.039 mo
399.71 265.039 li
399.71 233.83 li
-15.591 233.83 li
cp
clp
%ADOBeginSubsetFont: IAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IXTYTS+CambriaMath gcheck setglobal} if
2 6640 1868 <00020018fe52040d03cd0025003b0028401523251b1d2c951b1612369714
1009080811059e0c10003fed32322f333fed323fed323f33313001363534
262322060727363633321615140717123332161514020623222707061514
1617072101060615141633323e0435342623220e02070112151a1c1f453c
395a7d4c3e49170cb9b76d7985ec9285582e0f2d4108fecb01560a054352
33564d3e31193b40336376421302775c3b28243343385e535244383e0401
0fa697a5fec1bb3adb472e2c250631030a35381b4e47284c6c8f97426967
45989460>IXTYTS+CambriaMath AddT42Char 
IXTYTS+CambriaMath /CharStrings get begin
/g1868 1868 def
end
IXTYTS+CambriaMath /Encoding get
dup 35 /g1868 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IXTYTS+CambriaMath*1 
[32{/.notdef}rp /g1874 /g3548 /g1863 /g1868 220{/.notdef}rp]
IXTYTS+CambriaMath nf
IXTYTS+CambriaMath*1 [26.2403 4.27626e-7 -1.44668e-6 -26.1282 0 0 ]msf
179.247 259.12 mo
(#)sh
IXTYTS+CambriaMath*1 [18.6159 3.03375e-7 -1.02633e-6 -18.5364 0 0 ]msf
192.986 264.413 mo
(")sh
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H findfont [26.2403 4.27626e-7 -1.44668e-6 -26.1282 0 0 ]msf
205.854 259.12 mo
(o\263)sh
grestore
gsave
20.537 219.69 mo
435.838 219.69 li
435.838 188.481 li
20.537 188.481 li
cp
clp
%ADOBeginSubsetFont: IAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IXTYTS+CambriaMath gcheck setglobal} if
2 6016 1843 <00020087fe8204e205650020002e00224011249119040a100a090906002b
9111130d06002fcd3fed3911392fcd383fed3130251e0433323637170606
232226262726263534121224333216151402020601342623220602021510
3332121202ae172825242418264e3034508a4953694d24b5be65bf01099c
c1d1589acb01006e726cbb8d4ee18be88e01495f3b1d0a2c363857484aa2
830adcc896017a012195e0d48cfea6fef7a203bb959d9afee2feaa83fecb
010301ca>IXTYTS+CambriaMath AddT42Char 
IXTYTS+CambriaMath /CharStrings get begin
/g1843 1843 def
end
IXTYTS+CambriaMath /Encoding get
dup 36 /g1843 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IXTYTS+CambriaMath*1 
[32{/.notdef}rp /g1874 /g3548 /g1863 /g1868 /g1843 219{/.notdef}rp]
IXTYTS+CambriaMath nf
IXTYTS+CambriaMath*1 [26.2403 4.27626e-7 -1.44668e-6 -26.1282 0 0 ]msf
213.812 213.771 mo
($)sh
IXTYTS+CambriaMath*1 [18.6159 3.03375e-7 -1.02633e-6 -18.5364 0 0 ]msf
230.678 219.064 mo
(")sh
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H findfont [26.2403 4.27626e-7 -1.44668e-6 -26.1282 0 0 ]msf
243.425 213.771 mo
(o\263)sh
grestore
gsave
-70.768 148.35 mo
344.533 148.35 li
344.533 101.549 li
-70.768 101.549 li
cp
clp
%ADOBeginSubsetFont: IAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IXTYTS+CambriaMath gcheck setglobal} if
2 6200 1844 <00020039000004ab0555003600450028401500149145451d4442912ba62c
03201da61f12090b12003f333fed323feded3212392fed39313001161617
171e031707212627272e032323030e0215141616170721373e0337133635
3426273721321e03151406072732363635342e04232207030338303b1217
0b1c27312f0afeeb20192c0b1f2b392972460907051428310bfe650b2626
1a1616aa162e340b01bd6a865f4020bcb7e291a862101a283c4f44353b80
026b246459743758341a0831597bd4374b290dfec3272e33141f23100431
31061b3045630302643a3126033119324f63389ad838404eb2672b432c22
190b04fdbd00>IXTYTS+CambriaMath AddT42Char 
2 5814 1828 <00030039000004ce0555001d002b0036002340120036912b2b2e2a289114
a615032c2e910812003fed323feded3212392fed39313001161615140606
2321373e033713363534262737213216161514060725323e0235342e0223
2207030316333236363534262323038e5d647af4ebfe430b26261a1616aa
162e340b01ef96b555a09efeea768b6a301e495f4f574b71913d5998996e
8584b002bb25895785bd7431061b3045630302643a312603313f7a5c83c3
342b2662754d2b4b351703fdf7fd6b0445b081656600>IXTYTS+CambriaMath AddT42Char 
IXTYTS+CambriaMath /CharStrings get begin
/g1844 1844 def
/g1828 1828 def
end
IXTYTS+CambriaMath /Encoding get
dup 37 /g1844 put
dup 38 /g1828 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IXTYTS+CambriaMath*1 
[32{/.notdef}rp /g1874 /g3548 /g1863 /g1868 /g1843 /g1844 /g1828 
217{/.notdef}rp]
IXTYTS+CambriaMath nf
IXTYTS+CambriaMath*1 [26.1441 8.52115e-7 -3.76963e-6 -26.0666 0 0 ]msf
117.095 132.652 mo
(%)sh
IXTYTS+CambriaMath*1 [18.5438 6.04398e-7 -2.67377e-6 -18.4888 0 0 ]msf
133.21 137.952 mo
(&)sh
IXTYTS+CambriaMath*1 [15.5373 5.06409e-7 -2.24028e-6 -15.4913 0 0 ]msf
145.746 141.908 mo
(")sh
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H findfont [26.1441 8.52115e-7 -3.76963e-6 -26.0666 0 0 ]msf
157.652 132.652 mo
(o\263)sh
grestore
[12.25 8.75 ] 0 dsh
222.52 287.717 mo
273.54 233.858 li
@
275.29 148.77 mo
211.35 125.49 li
@
103.46 49.61 mo
52.441 67.83 li
@
162.24 183.21 mo
155.56 151.44 120.45 132.23 81.445 138.99 cv
/1 
[/DeviceCMYK] /CSA add_res
.689113 .134463 0 0 cmyk
@
75.118 140.31 mo
82.602 134.39 li
81.837 137.29 82.485 140.39 84.352 142.74 cv
75.118 140.31 li
cp
ef
181.01 241.031 mo
191.51 221.66 191.61 202.79 181.26 195.42 cv
@
175.34 192.81 mo
184.88 192.35 li
182.57 194.27 181.29 197.16 181.44 200.17 cv
175.34 192.81 li
cp
ef
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/IXTYTT+CambriaMath*1 uf
/IXTYTT+CambriaMath uf
/NAAAAA+CambriaMath uf
/IXTYTU+DengXian-Regular-GBK-EUC-H-Identity-H uf
/IXTYTU+DengXian-Regular-GBK-EUC-H /CIDFont ur
/IXTYTS+CambriaMath*1 uf
/IXTYTS+CambriaMath uf
/IAAAAA+CambriaMath uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
